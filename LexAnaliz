using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace task
{
    public class Token
    {
        /// <summary>
        /// Свойство тип токена
        /// </summary>
        public string Type { get; set; }
        /// <summary>
        /// Свойство значение токена
        /// </summary>
        public string Value { get; set; }
        /// <summary>
        /// Свойство номер токена
        /// </summary>
        public int Number { get; set; }
        /// <summary>
        /// Свойство название дополнительной операции
        /// </summary>
        public string Oper { get; set; }
        /// <summary>
        /// Конструктор класса Token
        /// </summary>
        /// <param name="type">Тип токена</param>
        /// <param name="value">Значение токена</param>
        /// <param name="number">Номер токена в таблице </param>
        public Token(string type, string value, int number = -1)
        {
            Type = type;
            Value = value;
            Number = number;
        }
        /// <summary>
        /// Конструктор класса Token
        /// </summary>
        /// <param name="type">Тип токена</param>
        /// <param name="oper">Название дополнительной операции </param>
        /// <param name="value">Значение токена</param>
        /// <param name="number">Номер токена в таблице </param>
        public Token(string type, string oper, string value, int number = -1)
        {
            Type = type;
            Oper = oper;
            Value = value;
            Number = number;
        }
        /// <summary>
        /// Метод, выводящий данные о лексеме
        /// </summary>
        /// <returns>String</returns>
        public override string ToString()
        {
            return $"({Type}, {Number})";
        }
    }

    public class LexAnaliz
    {
        public LexAnaliz()
        { }

        /// <summary>
        /// Поле, определяющее состояние анализатора
        /// </summary>
        enum State { S, I, H, R, D } // Состояния: S - начальное, I - идентификатор, H - шестнадцатеричное число, R - разделитель, D - десятичное число

        /// <summary>
        /// Метод, определяющий является ли входной символ английской буквой
        /// </summary>
        /// <param name="c">Входной символ </param>
        /// <returns>bool</returns>
        private static bool IsEnglishLetter(char c)
        {
            return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
        }

        /// <summary>
        /// Метод, определяющий является ли входной символ шестнадцатеричной цифрой
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        private static bool IsHexDigit(char c)
        {
            return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');
        }

        /// <summary>
        /// Метод, определяющий является ли входной символ десятичной цифрой
        /// </summary>
        /// <param name="c">Входной символ </param>
        /// <returns>bool</returns>
        private static bool IsDecimalDigit(char c)
        {
            return (c >= '0' && c <= '9');
        }

        /// <summary>
        /// Метод, определяющий является ли входной символ пробелом
        /// </summary>
        /// <param name="c">Входной символ </param>
        /// <returns>bool</returns>
        private static bool IsWhiteSpace(char c)
        {
            return c == ' ' || c == '\t' || c == '\n' || c == '\r';
        }

        /// <summary>
        /// Метод, определяющий является ли входной символ буквой или цифрой
        /// </summary>
        /// <param name="c">Входной символ </param>
        /// <returns>bool</returns>
        private static bool IsLetterOrDigit(char c)
        {
            return IsEnglishLetter(c) || IsHexDigit(c);
        }

        /// <summary>
        /// Метод, определяющий является ли начало строки шестнадцатеричным числом
        /// </summary>
        /// <param name="inputString">Входная строка </param>
        /// <param name="index">Индекс  символа в строке</param>
        /// <returns>bool</returns>
        private static bool IsHexDigitStart(string inputString, int index)
        {
            return inputString[index] == '0' && index + 1 < inputString.Length && (inputString[index + 1] == 'x' || inputString[index + 1] == 'X');
        } 
        /// <summary>
        /// Поле массива служебных слов
        /// </summary>
        //                                            0       1       2      3       4
        private static readonly string[] SlWord = { "main", "int", "long", "for", "return" }; 
        /// <summary>
        /// Поле массива одиночных разделителей
        /// </summary>                        
                 //                                        0    1    2    3    4    5    6    7    8
        private static readonly string[] SingleRazdel = { "(", ")", "{", "}", ",", ";", "*", "/", "%" }; 
        /// <summary>
        /// Поле массива потенциально парных разделителей
        /// </summary>
                                //                       9    10   11   12   13   14     
        private static readonly string[] ParnRazdel = { "+", "-", ">", "<", "=", "!" };                                                                       
        /// <summary>
        /// Поле массива составных разделителей
        /// </summary>
                                //                      15    16    17    18    19     20 
        private static readonly string[] TwoRazdel = { "++", "--", "<=", ">=", "==", "!=" }; 

        /// <summary>
        /// Поле списка идентификаторов
        /// </summary>
        public static readonly List<string> Identifiers = new List<string>();
        /// <summary>
        /// Поле списка литералов
        /// </summary>
        public static readonly List<string> Literals = new List<string>();
        /// <summary>
        /// Метод обработчик ошибок
        /// </summary>
        /// <param name="kod">Код ошибки</param>
        /// <param name="index">Индекс ошибки </param>
        /// <param name="listBox3">Элемент управления для вывода ошибок</param>
        public void Error(int kod, int index, ListBox listBox3)//обработчик ошибок
        {
            string errorMessage = $"Лексическая ошибка #{kod} на позиции {index}: ";

            switch (kod)
            {
                case -1:
                    errorMessage = "Лексических ошибок нет";
                    break;
                case 50:
                    errorMessage += "Неизвестный символ";
                    break;
                default:
                    errorMessage += "Неизвестная лексическая  ошибка";
                    break;
            }
            // Выводим ошибку в ListBox3
            if (listBox3 != null)
            {
                listBox3.Items.Add(errorMessage);
            }
            else
            {
                Console.WriteLine(errorMessage);
            }
        }

        /// <summary>
        /// Метод, запускающий работу лексического анализатора 
        /// </summary>
        /// <param name="inputString">Входящая строка кода </param>
        /// <param name="listBox3">Элемент управления для вывода ошибок</param>
        /// <returns>List<Token></returns>
        public static List<Token> InterpString(string inputString, ListBox listBox3)
        {
            List<Token> Tokens = new List<Token>(); // Список для хранения токенов

            var l = new LexAnaliz();
            int y = 0;
            Identifiers.Clear();
            Literals.Clear();

            State state = State.S; // Начальное состояние
            string buffer = ""; // Буфер для накопления символов
            int repeatState = 1; // Флаг для повторной обработки состояния

            for (int i = 0; i < inputString.Length; i++)
            {
                char c = inputString[i]; // Текущий символ

                if (repeatState == 1) repeatState = 0; // Сброс флага повторной обработки

                for (int j = -1; j < repeatState; ++j)
                {
                    switch (state)
                    {
                        case State.S:
                            if (IsEnglishLetter(c))
                            {// Переход в состояние идентификатора
                                state = State.I;
                                buffer += c;
                            }
                            else if (IsHexDigitStart(inputString, i))
                            {// Переход в состояние шестнадцатеричного числа
                                state = State.H;
                                buffer += c;
                            }
                            else if (IsDecimalDigit(c))
                            {// Переход в состояние десятичного числа
                                state = State.D;
                                buffer += c;
                            }
                            else if (IsWhiteSpace(c)) { } // Игнорирование пробелов

                            else if (SingleRazdel.Contains(c.ToString()))
                            {  // Добавление одиночного разделителя
                                Tokens.Add(new Token("R", c.ToString(), Array.IndexOf(SingleRazdel, c.ToString())));
                            }
                            else if (ParnRazdel.Contains(c.ToString()))
                            { // Переход в состояние разделителя, в случае, если он парный
                                state = State.R;
                                buffer += c;
                            }
                            else
                            { l.Error(50, i, listBox3); y++; }
                            break;

                        case State.I:
                            if (IsLetterOrDigit(c)) 
                            {
                                if (buffer.Length < 7)//индефикатор длинной до 7 символов
                                {
                                    buffer += c;
                                }
                            } // Накопление символов идентификатора
                            else
                            {
                                if (SlWord.Contains(buffer))
                                {
                                    Tokens.Add(new Token("SW", buffer, Array.IndexOf(SlWord, buffer)));
                                }
                                else
                                {
                                    if (!Identifiers.Contains(buffer))
                                    {
                                        Identifiers.Add(buffer);
                                    }
                                    Tokens.Add(new Token("ID", buffer, Identifiers.IndexOf(buffer)));
                                }
                                buffer = "";
                                state = State.S;
                                repeatState = 1;
                            }
                            break;


                        case State.H:
                            if (buffer == "0" && (c == 'x' || c == 'X')) { buffer += c; } // Накопление шестнадцатеричного числа
                            else if (IsHexDigit(c)) { buffer += c; }
                            else
                            {
                                if (!Literals.Contains(buffer))
                                {
                                    Literals.Add(buffer);
                                }
                                int decimalValue = Convert.ToInt32(buffer, 16);
                                Tokens.Add(new Token("L", decimalValue.ToString(), Literals.IndexOf(buffer)));
                                buffer = "";
                                state = State.S;
                                repeatState = 1;
                            }
                            break;


                        case State.D:
                            if (IsDecimalDigit(c)) { buffer += c; } // Накопление десятичного числа
                            else
                            {
                                if (!Literals.Contains(buffer))
                                {
                                    Literals.Add(buffer);
                                }
                                Tokens.Add(new Token("L", buffer, Literals.IndexOf(buffer)));
                                buffer = "";
                                state = State.S;
                                repeatState = 1;
                            }
                            break;


                        case State.R:
                            if (TwoRazdel.Contains(buffer + c))
                            { // Накопление парного разделителя
                                buffer += c;
                            }
                            else
                            {// Добавление парного разделителя
                                if (buffer.Length > 1)
                                    Tokens.Add(new Token("R", buffer, Array.IndexOf(TwoRazdel, buffer) + 15));
                                else
                                    Tokens.Add(new Token("R", buffer, Array.IndexOf(ParnRazdel, buffer) + 9));
                                buffer = "";
                                state = State.S;
                                repeatState = 1;
                            }
                            break;
                    }
                }
            }

            // Добавление последнего накопленного буфера, если он не пустой
            if (buffer != "")
            {
                switch (state)
                {
                    case State.I:
                        if (SlWord.Contains(buffer))
                        {
                            Tokens.Add(new Token("SW", buffer, Array.IndexOf(SlWord, buffer)));
                        }
                        else
                        {
                            if (!Identifiers.Contains(buffer))
                            {
                                Identifiers.Add(buffer);
                            }
                            Tokens.Add(new Token("ID", buffer, Identifiers.IndexOf(buffer)));
                        }
                        break;
                    case State.H:
                    case State.D:
                        if (!Literals.Contains(buffer))
                        {
                            Literals.Add(buffer);
                        }
                        Tokens.Add(new Token("L", buffer, Literals.IndexOf(buffer)));
                        break;

                    case State.R:
                        if (buffer.Length > 1)
                            Tokens.Add(new Token("R", buffer, Array.IndexOf(TwoRazdel, buffer) + 15));
                        else
                            Tokens.Add(new Token("R", buffer, Array.IndexOf(ParnRazdel, buffer) + 9));
                        break;
                }
            }

            if(y == 0)
            {
                l.Error(-1, 0, listBox3);
            }
            return Tokens; // Возвращаем список токенов
        }

    }
}
